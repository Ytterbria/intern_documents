*java中的类加载过程
类加载指的是JVM在运行程序时,把.class文件加载到内存,并且创建对应的Class对象的过程. 每个类在JVM中对应一个唯一的Class对象. 类加载是在运行时完成的,不是在编译期进行
1.加载
JVM读取类文件的二进制数据,把它转换成Class对象. 通过类的全限定名定位.class文件. 使用类加载器加载字节码,然后在方法区生产Class对象

2.连接(Linking)
连接又分为了三个步骤
.验证: 确保字节码符合JVM规范,防止被恶意篡改
.准备: 为类的静态变量分配内存,并且赋默认值,例如(int默认0,对象默认null)
.解析: // ? 将符号引用转化为直接引用,把方法调用符号解析成内存地址
符号引用: 在编译期生产的一种引用,不是实际的内存地址,而是一个逻辑标识
而直接引用就是运行时奖符号引用解析成内存中的实际地址,也叫直接指针

3.初始化
JVM执行类的静态代码块和静态变量的赋值,这是类加载的最后阶段

*类加载器
Java中的类都由ClassLoader负责加载,不同类加载器形成命名空间,包装类的唯一性
主要的类加载器有 : 
Bootstrap: 加载JDK核心类, 例如java.lang.*
Extention: 加载JDK扩展目录的类 jrc/lib/ext , bootstrap是它的父加载器
System/Application: 加载classpath下的应用程序类 , Extention是它的父加载器

继承ClassLoader也可以自定义类加载器

双亲委派机制
先自下向上委托,再自上向下加载,子加载器记录了父加载器,父却没有记录子
JVM优先交给父加载器加载,如果父没有加载到,才交给子加载器
这种机制使得类有了层次的划分,避免了类的重复加载,一个类在JVM中只会被加载一次
也防止了恶意代码加载不受信任的类, 而代替系统核心类

JDBC是违反双亲委派机制的,它的接口是类库

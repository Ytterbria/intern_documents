抽象类和接口的区别

设计的动机不同:
接口的设计是自上而下的: 知晓了某一系列行为,基于这些行为约束定义了接口,一些类需要有这些行为
所以会去实现对应的接口. 
而抽象类的设计是自下而上的,当我们写了很多类,发现之间有共性,可以实现代码复用,因此就会将公共的逻辑封装成一个抽象类,减少代码冗余. (例如图片上传类,写了URL上传,文件上传,批量上传的类,发现他们都有同样的逻辑,所以封装成图片上传抽象类)

方法实现和继承/实现规则: 
interface中的方法默认是public abstract, 在java8之后可以有default方法或静态方法
抽象类中可以包含abstract方法(没有实现)和具体方法(有实现). 允许子类继承并且重用抽象类中的方法实现.  例如可以把通用的validate,upload等相关方法在通用抽象类中实现,而对于具体的上传方式对应的特殊方法,留给子类自行实现. 

接口不能包含构造函数,接口中的成员变量默认为public static final(即为常量)
抽象类可以包含构造函数,成员变量可以有不同的访问修饰符,并且可以不是常量

抽象类只能单继承,接口可以有多个实现
.java不支持多继承: 为了防止菱形继承的问题
A -> B , C -> D 如果D要调用定义在A中的方法,但是B,C分别有不同的实现,就会出现歧义

如果多个接口中有相同的default方法,子类必须重写这个方法.
default是java8接口里的新特性,可以用于给接口添加新方法,同时不破坏已有实现类


主节点负责接受客户端的写请求,并且将数据提供给从节点
从节点复制主节点的数据,然后对外提供读请求服务
实现了读写分离,提高了系统的性能, 也保证了高可用性,主节点宕机,从节点可以升级为新的主

有两种同步情况
*全量复制
第一次复制或复制终端后,通常会进行全量复制
1.从节点发送 psync ? -1 触发同步

2.主节点接收到psync命令后,发现runid值为 ? ,判断是全量同步,
返回fullresync 并带上自己的runid饿当前的复制进度,从节点中会存储这两个值

3.主节点bgsave生成RDB快照,同时将快照传给从节点
在生成RDB的过程中,来自客户端的新的写命令会写入 Replication Buffer,复制缓存区
4.主节点将RDB 发送给从节点, 从节点清空旧数据,加载RDB,恢复数据

5.RDB文件加载完过后,主节点再将replication buffer中的命令发送给从节点,确保一致性

*增量复制
当主从连接断开又恢复时,redis会尽量避免全量复制,改用增量复制
redis通过复制偏移量 replication offset 和复制积压缓冲区 
replication backlog buffer来实现
这个buffer是一个环形缓冲区,主节点会将命令写入其中,但是大小有限,
写入的命令超过1m后,会覆盖之前的数据

1.每个主从都维护一个offset,记录已经复制的位置
2.主节点维护一个复制积压缓冲区(可配置,默认 1MB)
3.如果从节点掉线时间比较短,还能在缓存去中找到确实的命令 -> 
用PSYNC offset 进行部分复制
4.如果缓冲区已经覆盖了缺失的数据,只能进行全量复制


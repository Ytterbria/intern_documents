在单机系统中, synchronized或reentrantLock能解决的问题
但是在分布式系统中,多个服务器可能同时操作同一份共享资源,所以需要一种
跨资源,跨节点的锁. 确保同一时刻只能有一个节点能获取资源的访问权限

*redis的基本实现
依赖于 setnx set if not exists
set lock_key unique_value nx ex 30
key为这个分布式锁的标识,value为这个锁的唯一表示请求的客户端,防止误删了别人的锁
nx表示只有key不存在的时候才能设置( 加锁的原子性) ex表示过期时间

*存在的问题
1.死锁 
如果客户端加锁后崩溃了,锁将会一直不释放. 可以设置过期时间,让锁自动失效

2.但是设置了锁过期之后,可能导致并发持有(TTL 太短),当执行任务的时间 > TTL,
那么锁过期之后就会被其他的客户端持有, 导致两个客户端并行操作.
因此可以使用拥有看门狗机制的Redisson,启动一个守护线程定期(releaseTime/3)检查锁是否仍属于自己,
并且及时续期,防止被其他客户端持有. redisson在一个线程中是可重入的

